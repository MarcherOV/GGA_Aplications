// serial.cpp

#include "serial.h"
#include <fcntl.h>   // ??? open
#include <unistd.h>  // ??? close
#include <termios.h> // ??? termios
#include <cstring>   // ??? memset
#include <iostream>

using namespace std;

// ??????? ??? ????????? ????????? ?????
int openSerialPort(const char* portname) {
    int fd = open(portname, O_RDWR | O_NOCTTY | O_NDELAY);
    if (fd == -1) {
        cerr << "Failed to open serial port." << endl;
    }
    return fd; // ?????????? ??????????? ?????
}

// ??????? ??? ???????????? ????????? ?????
bool configureSerialPort(int fd, int speed) {
    struct termios options;

    if (tcgetattr(fd, &options) != 0) {
        cerr << "Failed to get attributes for serial port." << endl;
        return false;
    }

    // ???????????? ?????????
    cfsetispeed(&options, speed);
    cfsetospeed(&options, speed);

    // ???????????? ?????????? (8 ??? ?????, ??? ????????, 1 ????-???)
    options.c_cflag &= ~PARENB; // ??? ????????
    options.c_cflag &= ~CSTOPB; // 1 ????-???
    options.c_cflag &= ~CSIZE;   // ???????? ??????? ???????????? ??????? ?????
    options.c_cflag |= CS8;      // 8 ??? ?????
    options.c_cflag |= (CLOCAL | CREAD); // ?????????? ????????, ??????????? ??????????? ?????

    // ???????????? ???????????
    if (tcsetattr(fd, TCSANOW, &options) != 0) {
        cerr << "Failed to set attributes for serial port." << endl;
        return false;
    }

    return true; // ??????? ???????????
}

// ??????? ??? ???????? ????????? ?????
void closeSerialPort(int fd) {
    close(fd);
}

// ??????? ??? ??????? ????? ? ????????? ?????
void readData(int fd) {
    char buffer[256];
    while (true) {
        ssize_t bytesRead = read(fd, buffer, sizeof(buffer) - 1);
        if (bytesRead > 0) {
            buffer[bytesRead] = '\0'; // ?????????? ?????
            cout << "Received: " << buffer; // ????????? ?????
        }
    }
}

// ??????? ??? ????????????? ????????? ?????
int initializeSerialPort(const char* portname, int baudrate) {
    int fd = openSerialPort(portname);
    if (fd == -1) {
        return -1; // ??????? ???????
    }

    if (!configureSerialPort(fd, baudrate)) {
        closeSerialPort(fd);
        return -1; // ??????? ???????
    }

    return fd; // ?????????? ??????????? ????? ?? ?????
}
